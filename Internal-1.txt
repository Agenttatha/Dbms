Question Number 1:

1. customer(cust_id, name, income_permonth, gender, location_pincode) cust_id is pk, location_pincode is fk
on city table
2. accounts( account_number, cust_id, account_type, balance_inlakhs, ifsc_code) account_number is pk ,
cust_id is fk on customers , ifsc_code is fk on branch table
3. branch (ifsc_code, branch_name, location_pincode) ifsc_code is pk
4. city( location_pincode, cityname, state) location_pincode is pk 

Ans 1:

--1
SELECT COUNT(*) AS num_accounts
FROM accounts
WHERE balance_inlakhs > 1 AND cust_id IN (
    SELECT cust_id
    FROM customer
    WHERE location_pincode = (
        SELECT location_pincode
        FROM city
        WHERE cityname = 'City A'
    )
);

--2
SELECT COUNT(*) AS num_branches
FROM branch
WHERE location_pincode = (
    SELECT location_pincode
    FROM city
    WHERE cityname = 'City B'
) AND ifsc_code IN (
    SELECT ifsc_code
    FROM accounts
    WHERE cust_id IN (
        SELECT cust_id
        FROM customer
        WHERE gender = 'Female'
    )
    GROUP BY ifsc_code
    HAVING COUNT(*) > 2
);

--3
SELECT name
FROM customer
WHERE cust_id IN (
    SELECT cust_id
    FROM accounts
    WHERE ifsc_code IN (
        SELECT ifsc_code
        FROM branch
        WHERE branch_name = 'Gandipet'
    )
    GROUP BY cust_id
    HAVING COUNT(*) > 1
);

--4
SELECT cityname
FROM city
WHERE location_pincode = (
    SELECT location_pincode
    FROM customer
    WHERE location_pincode = (
        SELECT location_pincode
        FROM accounts
        GROUP BY location_pincode
        ORDER BY AVG(balance_inlakhs) ASC
        LIMIT 1
    )
    LIMIT 1
);

--4

SELECT cityname
FROM city
WHERE location_pincode = (
    SELECT location_pincode
    FROM customer
    WHERE location_pincode = (
        SELECT location_pincode
        FROM accounts
        GROUP BY location_pincode
        ORDER BY AVG(balance_inlakhs) ASC
    )
    FETCH FIRST 1 ROWS ONLY
); 

Question Number 2:

1. Emp ( emp_id, ename, salary, did, eid_of_manager) emp_id is pk and eid of manger is fk on emp_id of
same table.
2. dept(did, dname) did is pk.
3. projects(pid, eid)pid is pk and eid is fk on emp. 

Ans 2:

1.Find the number of managers from the AIML dept who are doing projects:

SELECT COUNT(distinct emp1.eid_of_manager) AS num_managers
FROM Emp1
WHERE did = (SELECT did FROM dept1 WHERE dname = 'AIML') AND emp_id IN (SELECT eid FROM projects1); 

2. Find the employee names from the CSE dept whose salary is greater than the maximum average salary of all departments:

SELECT ename
FROM Emp1
WHERE did = (SELECT did FROM dept1 WHERE dname = 'CSE')
  AND salary > (SELECT MAX(avg_salary) FROM (SELECT AVG(salary) AS avg_salary FROM Emp1 GROUP BY did) AS avg_salaries);

3. Find the dept names from which none of the employees are doing atleast one projects:

SELECT dname
FROM dept1
WHERE did NOT IN (SELECT did FROM Emp1 WHERE emp_id IN (SELECT eid FROM projects1));

4. Find employee names who are managers to themselves.

SELECT ename
FROM Emp1
WHERE emp_id = eid_of_manager;

5. Find employee names who are not managers to any employees.


SELECT ename
FROM Emp1
WHERE emp_id NOT IN (SELECT DISTINCT eid_of_manager FROM Emp1);










Question Number 3:

1. artists ( artist_id, name, location_pincode) artist_id is pk, location pincode is fk on city table.
2. skills (skills_id, skill_name)skill id is pk.
3. artists_skills(artist_id, skill_id, exp_in_years )artist_id and skill_id combined pk ie composite pk and
skill_id is fk on skills table.
4. movies(movie_name,artist_id, language, genre)movie_name and artist_id are composite pk , genres like
action, horror etc.
5. city(pincode, cityname, state)pincode is pk

Ans 3:

1. Find the artists who are both directors and producers for action genre.


SELECT name
FROM artists
WHERE artist_id IN (
    SELECT artist_id
    FROM artists_skills
    WHERE skill_id IN (
        SELECT skills_id
        FROM skills
        WHERE skill_name = 'director' OR skill_name = 'producer'
    )
)
AND artist_id IN (
    SELECT artist_id
    FROM movies
    WHERE genre = 'action'
);


2. Find music directors from Hyderabad city who have at least 5 years of experience as singers in telugu
movies.

SELECT name
FROM artists
WHERE artist_id IN (
    SELECT artist_id
    FROM artists_skills
    WHERE skill_id = (
        SELECT skills_id
        FROM skills
        WHERE skill_name = 'music director'
    )
    AND exp_in_years >= 5
    AND artist_id IN (
        SELECT artist_id
        FROM movies
        WHERE language = 'Telugu'
    )
)
AND location_pincode IN (
    SELECT pincode
    FROM city
    WHERE cityname = 'Hyderabad'
);

3. Find all artists names who commonly worked for kgf1, RRR and pushpa movies.


SELECT name
FROM artists
WHERE artist_id IN (
    SELECT artist_id
    FROM movies
    WHERE movie_name IN ('KGF1', 'RRR', 'Pushpa')
);





Question Number 4:

1. player(player_id, name, game_account_balance, location_pincode) player_id is pk , location_pincode is fk
on city table.
2. matches(match_id, type_of_game , location_pincode).
3. transactions( trans_id, player_id, bet_amount, win_or_loss) Win_or_loss is Boolean column.
4. city(pincode, name) pincode is pk .

Answer 4:

1. Find the player name who lost maximum amount in bets.

SELECT name
FROM player
WHERE player_id = (
    SELECT player_id
    FROM transactions
    WHERE win_or_loss = false
    GROUP BY player_id
    ORDER BY SUM(bet_amount) DESC
    FETCH FIRST 1 ROWS ONLY
); 

2. Find city names with maximum average bet amount

SELECT name
FROM city
WHERE pincode IN (
    SELECT location_pincode
    FROM player
    WHERE player_id IN (
        SELECT player_id
        FROM transactions
        GROUP BY player_id
        HAVING AVG(bet_amount) = (
            SELECT MAX(avg_bet_amount)
            FROM (
                SELECT AVG(bet_amount) AS avg_bet_amount
                FROM transactions
                GROUP BY player_id
            ) AS avg_bets
        )
    )
);

3.  Find the type of game which is having minimum number of bets.

SELECT type_of_game
FROM matches
WHERE match_id = (
    SELECT match_id
    FROM transactions
    GROUP BY match_id
    ORDER BY COUNT(*) ASC
    FETCH FIRST 1 ROWS ONLY
);

4. Find city names from which no citizens bets done so far.

SELECT name
FROM city
WHERE pincode NOT IN (
    SELECT location_pincode
    FROM player
    WHERE player_id IN (
        SELECT player_id
        FROM transactions
    )
);

















